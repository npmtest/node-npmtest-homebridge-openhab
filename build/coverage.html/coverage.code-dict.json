{"/home/travis/build/npmtest/node-npmtest-homebridge-openhab/test.js":"/* istanbul instrument in package npmtest_homebridge_openhab */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-openhab/lib.npmtest_homebridge_openhab.js":"/* istanbul instrument in package npmtest_homebridge_openhab */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_homebridge_openhab = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_homebridge_openhab = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-openhab/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-homebridge-openhab && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_homebridge_openhab */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_homebridge_openhab\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_homebridge_openhab.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_homebridge_openhab.rollup.js'] =\n            local.assetsDict['/assets.npmtest_homebridge_openhab.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_homebridge_openhab.__dirname + '/lib.npmtest_homebridge_openhab.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-openhab/node_modules/homebridge-openhab/index.js":"// OpenHAB 1 Platform for HomeBridge\n// Written by Tommaso Marchionni\n// Based on many of the other HomeBridge platform modules\n//\n// Revisions:\n//\n// 17 October 2015 [tommasomarchionni]\n// - Initial release\n//\n// 25 October 2015 [tommasomarchionni]\n// - Added WS listener and new OOP structure\n//\n// 5 December 2015 [tommasomarchionni]\n// - Adapted for new plugin system\n//\n// 14 December 2015 [tommasomarchionni]\n// - Added temperature sensor item\n// - Added switch item,lightbulb item and fan item\n//\n// 16 December 2015 [tommasomarchionni]\n// - Added the possibility to load every type of sitemap\n// - Added skipItem in customAttr to avoid to load item in Homekit catalog\n// - Added outlet item\n//\n// 17 December 2015 [tommasomarchionni]\n// - Added contact item\n//\n// 11 February 2016 [tommasomarchionni]\n// - Experimental support for Thermostat\n//\n// 12 February 2016 [tommasomarchionni]\n// - Added support for humidity in Thermostat\n//\n// Rollershutter is tested with this binding in OpenHAB:\n// command=SWITCH_MULTILEVEL,invert_percent=true,invert_state=false\"\n// When you attempt to add a device, it will ask for a \"PIN code\".\n// The default code for all HomeBridge accessories is 031-45-154.\n//\n\n'use strict';\n\n//////// LIBS /////////\n\nvar Homebridge, Accessory;\nvar request = require(\"request\");\nvar ItemFactory = require('./libs/ItemFactory.js');\nvar Utility = require('./libs/Utility.js');\n\n//////// EXPORTS /////////\n\nmodule.exports = function(homebridge) {\n    Accessory = homebridge.hap.Accessory;\n    Homebridge = homebridge;\n\n    Utility.addSupportTo(ItemFactory.AbstractItem, Accessory);\n    Utility.addSupportTo(ItemFactory.SwitchItem, ItemFactory.AbstractItem);\n    Utility.addSupportTo(ItemFactory.LightbulbItem, ItemFactory.SwitchItem);\n    Utility.addSupportTo(ItemFactory.FanItem, ItemFactory.SwitchItem);\n    Utility.addSupportTo(ItemFactory.OutletItem, ItemFactory.SwitchItem);\n    Utility.addSupportTo(ItemFactory.DimmerItem, ItemFactory.AbstractItem);\n    Utility.addSupportTo(ItemFactory.RollershutterItem, ItemFactory.AbstractItem);\n    Utility.addSupportTo(ItemFactory.TemperatureSensorItem, ItemFactory.AbstractItem);\n    Utility.addSupportTo(ItemFactory.NumberItem, ItemFactory.TemperatureSensorItem);\n    Utility.addSupportTo(ItemFactory.ContactItem, ItemFactory.AbstractItem);\n    Utility.addSupportTo(ItemFactory.MotionSensorItem, ItemFactory.ContactItem);\n    Utility.addSupportTo(ItemFactory.LightSensorItem, ItemFactory.TemperatureSensorItem); //TODO ricontrollare\n    Utility.addSupportTo(ItemFactory.ThermostatItem, ItemFactory.AbstractItem);\n\n    homebridge.registerPlatform(\"homebridge-openhab\", \"openHAB\", OpenHABPlatform);\n};\n\n//////// PLATFORM /////////\n\nfunction OpenHABPlatform(log, config){\n    this.log      = log;\n    this.user     = config[\"user\"];\n    this.password = config[\"password\"];\n    this.host     = config[\"host\"];\n    this.port     = config[\"port\"];\n    this.protocol = \"http\";\n    this.sitemap  = \"demo\";\n    if (typeof config[\"useLabelForName\"] != 'undefined') {\n        this.useLabelForName = config[\"useLabelForName\"];\n    }\n    if (typeof config[\"sitemap\"] != 'undefined') {\n        this.sitemap = config[\"sitemap\"];\n    }\n    if (typeof config[\"customAttrs\"] != 'undefined') {\n        this.customAttrs = config[\"customAttrs\"];\n    } else {\n        this.customAttrs = [];\n    }\n}\n\nOpenHABPlatform.prototype.accessories = function(callback) {\n    var that = this;\n    this.log(\"Platform - Fetching OpenHAB devices.\");\n    var itemFactory = new ItemFactory.Factory(this,Homebridge);\n    var url = itemFactory.sitemapUrl();\n    this.log(\"Platform - Connecting to \" + url);\n    request.get({\n        url: url,\n        json: true\n    }, function(err, response, json) {\n        if (!err && response.statusCode == 200) {\n            callback(itemFactory.parseSitemap(json));\n        } else {\n            that.log(\"Platform - There was a problem connecting to OpenHAB.\");\n        }\n    });\n};","/home/travis/build/npmtest/node-npmtest-homebridge-openhab/node_modules/homebridge-openhab/libs/ItemFactory.js":"\"use strict\";\nvar exports = module.exports = {};\nexports.AbstractItem = require('../items/AbstractItem.js');\nexports.SwitchItem = require('../items/SwitchItem.js');\nexports.LightbulbItem = require('../items/LightbulbItem.js');\nexports.FanItem = require('../items/FanItem.js');\nexports.OutletItem = require('../items/OutletItem.js');\nexports.DimmerItem = require('../items/DimmerItem.js');\nexports.RollershutterItem = require('../items/RollershutterItem.js');\nexports.TemperatureSensorItem = require('../items/TemperatureSensorItem.js');\nexports.NumberItem = require('../items/NumberItem.js');\nexports.ContactItem = require('../items/ContactItem.js');\nexports.MotionSensorItem = require('../items/MotionSensorItem.js');\nexports.LightSensorItem = require('../items/LightSensorItem.js');\nexports.ThermostatItem = require('../items/ThermostatItem.js');\n\nexports.Factory = function(OpenHABPlatform,homebridge) {\n    this.platform = OpenHABPlatform;\n    this.log = this.platform.log;\n    this.homebridge = homebridge;\n    this.itemList = [];\n    this.uniqueIds = [];\n};\n\nexports.Factory.prototype.sitemapUrl = function () {\n    var serverString = this.platform.host;\n    //TODO da verificare\n    if (this.platform.user && this.platform.password) {\n        serverString = encodeURIComponent(this.platform.user) + \":\" + encodeURIComponent(this.platform.password) + \"@\" + serverString;\n    }\n\n    return this.platform.protocol + \"://\" + serverString + \":\" + this.platform.port + \"/rest/sitemaps/\" + this.platform.sitemap + \"?type=json\";\n};\n\nexports.Factory.prototype.parseSitemap = function (jsonSitemap) {\n    exports.Factory.prototype.traverseSitemap(jsonSitemap,this);\n\n    var accessoryList = [];\n    for (var key in this.itemList) {\n        if (this.itemList.hasOwnProperty(key)){\n\n            this.itemList[key] = exports.Factory.prototype.checkCustomAttrs(this.itemList[key],this.platform);\n            if (!(this.itemList[key].itemType in exports)){\n                this.log(\"Platform - The widget '\" + this.itemList[key].label + \"' of type \"+this.itemList[key].type+\" is an item not handled.\");\n                continue;\n            }\n            if (this.itemList[key].skipItem) {\n                this.log(\"Platform - The widget '\" + this.itemList[key].label + \"' of type \"+this.itemList[key].type+\" was skipped.\");\n                continue;\n            }\n\n            //If itemUniqueAggregationId is definited in the item configuration\n            if (typeof this.itemList[key].itemUniqueAggregationId !== 'undefined') {\n                if (typeof this.uniqueIds[this.itemList[key].itemUniqueAggregationId] !== 'undefined') {\n                    this.log(\"Platform - New attribute found for \" + this.itemList[key].label);\n                    this.uniqueIds[this.itemList[key].itemUniqueAggregationId]['set'+this.itemList[key].itemSubType](this.itemList[key]);\n                    this.log(\"Platform - The attribute \" + this.itemList[key].itemSubType + \" is attached to \" +this.itemList[key].label);\n                    continue;\n                }\n            }\n\n            var accessory = new exports[this.itemList[key].itemType](this.itemList[key], this.platform, this.homebridge);\n            this.log(\"Platform - Accessory Found: \" + this.itemList[key].label);\n\n            if (typeof this.itemList[key].itemUniqueAggregationId !== 'undefined') {\n                this.uniqueIds[this.itemList[key].itemUniqueAggregationId] = accessory;\n                this.log(\"Platform - New attribute found for \" + this.itemList[key].label);\n                this.uniqueIds[this.itemList[key].itemUniqueAggregationId]['set'+this.itemList[key].itemSubType](this.itemList[key]);\n                this.log(\"Platform - The attribute \" + this.itemList[key].itemSubType + \" is attached to \" +this.itemList[key].label);\n            }\n            accessoryList.push(accessory);\n        }\n    }\n    return accessoryList;\n};\n\nexports.Factory.prototype.checkCustomAttrs = function(widget,platform) {\n    widget.manufacturer = \"OpenHAB\";\n    widget.model = widget.type;\n    widget.itemType = widget.type;\n    widget.serialNumber = widget.name;\n    widget.skipItem = false;\n\n    //cicle customAttrs\n    if ('customAttrs' in platform){\n        for (var key in platform.customAttrs) {\n            if (platform.customAttrs.hasOwnProperty(key) && platform.customAttrs[key]['itemName'] === widget.name){\n                if (typeof platform.customAttrs[key]['itemLabel'] !== 'undefined'){\n                    widget.label=platform.customAttrs[key]['itemLabel'];\n                }\n                if (typeof platform.customAttrs[key]['itemManufacturer'] !== 'undefined'){\n                    widget.manufacturer=platform.customAttrs[key]['itemManufacturer'];\n                }\n                if (typeof platform.customAttrs[key]['itemSerialNumber'] !== 'undefined'){\n                    widget.serialNumber=platform.customAttrs[key]['itemSerialNumber'];\n                }\n                if (typeof platform.customAttrs[key]['itemType'] !== 'undefined'){\n                    widget.itemType=platform.customAttrs[key]['itemType'];\n                    widget.model = widget.itemType;\n                }\n                if (typeof platform.customAttrs[key]['itemModel'] !== 'undefined'){\n                    widget.model=platform.customAttrs[key]['itemModel'];\n                }\n                if (typeof platform.customAttrs[key]['skipItem'] !== 'undefined'){\n                    widget.skipItem=platform.customAttrs[key]['skipItem'];\n                }\n                if (typeof platform.customAttrs[key]['itemUniqueAggregationId'] !== 'undefined'){\n                    widget.itemUniqueAggregationId=platform.customAttrs[key]['itemUniqueAggregationId'];\n                }\n                if (typeof platform.customAttrs[key]['itemSubType'] !== 'undefined'){\n                    widget.itemSubType=platform.customAttrs[key]['itemSubType'];\n                }\n            }\n        }\n    }\n    return widget;\n};\n\nexports.Factory.prototype.traverseSitemap = function(jsonSitmap,factory) {\n\n    //initialize variables\n    var lastLabel=\"\";\n\n    for (var key in jsonSitmap) {\n\n        var name = \"\";\n        var label = \"\";\n        var type = \"\";\n        var state = \"\";\n        var link = \"\";\n        var item = undefined;\n\n        if (jsonSitmap.hasOwnProperty(key)){\n\n            if (key == \"label\"){\n                lastLabel = jsonSitmap[key];\n            }\n\n            if (key == \"item\" && typeof(jsonSitmap[key].type) !== 'undefined'){\n                name = jsonSitmap[key].name;\n                label = (lastLabel.trim() === \"\") ? name : lastLabel;\n                type = jsonSitmap[key].type;\n                state = jsonSitmap[key].state;\n                link = jsonSitmap[key].link;\n            } else if (typeof(jsonSitmap[key].item) !== 'undefined'){\n                name = jsonSitmap[key].item.name;\n                label = (jsonSitmap[key].label.trim() === \"\") ? name : jsonSitmap[key].label;\n                type = jsonSitmap[key].item.type;\n                state = jsonSitmap[key].item.state;\n                link = jsonSitmap[key].item.link;\n            }\n\n            if (name !== \"\"){\n                item = {\n                    name:name,\n                    label:label,\n                    type:type,\n                    state:state,\n                    link:link\n                };\n\n                //avoid duplicate items\n                if (!(name in factory.itemList)) factory.itemList[name] = item;\n            }\n\n            if ((typeof(jsonSitmap[key].widget) !== 'undefined') || (typeof(jsonSitmap[key].linkedPage) !== 'undefined') || key === 'widget'){\n                if (typeof(jsonSitmap[key].widget) !== 'undefined'){\n                    exports.Factory.prototype.traverseSitemap(jsonSitmap[key].widget,factory);\n                } else if(key === 'widget')  {\n                    exports.Factory.prototype.traverseSitemap(jsonSitmap[key],factory);\n                } else  {\n                    exports.Factory.prototype.traverseSitemap(jsonSitmap[key].linkedPage,factory);\n                }\n            }\n        }\n    }\n};","/home/travis/build/npmtest/node-npmtest-homebridge-openhab/node_modules/homebridge-openhab/items/AbstractItem.js":"\"use strict\";\n\nvar WSListener = require('../libs/WSListener.js');\n\nvar AbstractItem = function(widget,platform,homebridge) {\n    this.platform = platform;\n    this.widget =  widget;\n    this.homebridge = homebridge;\n\n    this.label = this.widget.label;\n    this.url = this.widget.link;\n    this.state = this.widget.state;\n    this.log = this.platform.log;\n    this.itemType=this.widget.itemType;\n\n    this.setInitialState = false;\n    this.setFromOpenHAB = false;\n    this.informationService = undefined;\n    this.otherService = undefined;\n    this.listener = undefined;\n    this.ws = undefined;\n\n    if (platform.user && platform.password) {\n        this.url = this.url.replace('http://', 'http://' + encodeURIComponent(this.platform.user) + \":\" + encodeURIComponent(this.platform.password) + \"@\");\n    }\n    this.name = this.platform.useLabelForName ? this.label : this.widget.name;\n\n    AbstractItem.super_.call(this, this.name, homebridge.hap.uuid.generate(String(this.widget.name)));\n\n};\n\nAbstractItem.prototype.getServices = function() {\n    this.initListener();\n    this.setInitialState = true;\n    this.informationService = this.getInformationServices();\n    this.otherService = this.getOtherServices();\n    return [this.informationService, this.otherService];\n};\n\nAbstractItem.prototype.getOtherServices = function() {\n    return null;\n};\n\nAbstractItem.prototype.getInformationServices = function() {\n    var informationService = new this.homebridge.hap.Service.AccessoryInformation();\n\n    informationService\n        .setCharacteristic(this.homebridge.hap.Characteristic.Manufacturer, this.manufacturer)\n        .setCharacteristic(this.homebridge.hap.Characteristic.Model, this.model)\n        .setCharacteristic(this.homebridge.hap.Characteristic.SerialNumber, this.serialNumber)\n        .setCharacteristic(this.homebridge.hap.Characteristic.Name, this.name);\n    return informationService;\n};\n\nAbstractItem.prototype.initListener = function() {\n    if (typeof this.listener == 'undefined' || typeof this.ws == 'undefined') {\n        this.listener = this.listenerFactory(this.name,this.url,this.ws,this.log, this.updateCharacteristics.bind(this));\n    }\n};\n\nAbstractItem.prototype.listenerFactory = function(itemName,itemUrl,ws,log,callback) {\n    return new WSListener(itemName,itemUrl,ws,log,callback.bind(this)).startListener();\n};\n\nmodule.exports = AbstractItem;","/home/travis/build/npmtest/node-npmtest-homebridge-openhab/node_modules/homebridge-openhab/libs/WSListener.js":"\"use strict\";\n\nvar WebSocket = require('ws');\n\nvar WSListener = function(itemName,itemUrl,ws,log,callback) {\n    this.itemName = itemName;\n    this.itemUrl = itemUrl;\n    this.log = log;\n    this.ws = ws;\n    this.callback = callback;\n};\n\nWSListener.prototype.startListener = function () {\n    var self = this;\n\n    if (typeof this.ws == 'undefined') {\n        this.ws = new WebSocket(this.itemUrl.replace('http:', 'ws:') + '/state?type=json');\n    }\n\n    this.ws.on('open', function() {\n        self.log(\"OpenHAB WS - new connection for \"+self.itemName);\n        self.runForever(15000);\n    });\n\n    this.ws.on('message', function(message) {\n        self.log(\"OpenHAB WS - message from \" +self.itemName+\": \"+ message);\n        self.callback(message);\n    });\n\n    this.ws.on('close', function close() {\n        self.log(\"OpenHAB WS - closed connection for \"+self.itemName);\n        self.ws = undefined;\n        self = undefined;\n    });\n};\n\nWSListener.prototype.runForever = function (interval) {\n    var self = this;\n    var intervalId = setInterval(function timeout() {\n        if (typeof self.ws !== 'undefined'){\n            self.ws.ping();\n        } else {\n            clearInterval(intervalId);\n        }\n    }, interval);\n};\n\nmodule.exports = WSListener;","/home/travis/build/npmtest/node-npmtest-homebridge-openhab/node_modules/homebridge-openhab/items/SwitchItem.js":"\"use strict\";\n\nvar request = require(\"request\");\n\nvar SwitchItem = function(widget,platform,homebridge) {\n    SwitchItem.super_.call(this, widget,platform,homebridge);\n};\n\nSwitchItem.prototype.getOtherServices = function() {\n    var otherService = new this.homebridge.hap.Service.Switch();\n\n    otherService.getCharacteristic(this.homebridge.hap.Characteristic.On)\n        .on('set', this.setItemState.bind(this))\n        .on('get', this.getItemState.bind(this))\n        .setValue(this.state === 'ON');\n\n    return otherService;\n};\n\nSwitchItem.prototype.updateCharacteristics = function(message) {\n\n    this.setFromOpenHAB = true;\n    this.otherService\n        .getCharacteristic(this.homebridge.hap.Characteristic.On)\n        .setValue(message === 'ON',\n            function() {\n                this.setFromOpenHAB = false;\n            }.bind(this)\n        );\n};\n\nSwitchItem.prototype.getItemState = function(callback) {\n\n    var self = this;\n\n    this.log(\"iOS - request power state from \" + this.name);\n    request(this.url + '/state?type=json', function (error, response, body) {\n        if (!error && response.statusCode == 200) {\n            self.log(\"OpenHAB HTTP - response from \" + self.name + \": \" + body);\n            callback(undefined,body === \"ON\");\n        } else {\n            self.log(\"OpenHAB HTTP - error from \" + self.name + \": \" + error);\n        }\n    })\n};\n\nSwitchItem.prototype.setItemState = function(value, callback) {\n\n    var self = this;\n\n    if (this.setInitialState) {\n        this.setInitialState = false;\n        callback();\n        return;\n    }\n\n    if (this.setFromOpenHAB) {\n        callback();\n        return;\n    }\n\n    this.log(\"iOS - send message to \" + this.name + \": \" + value);\n    var command = value ? 'ON' : 'OFF';\n    request.post(\n        this.url,\n        { body: command },\n        function (error, response, body) {\n            if (!error && response.statusCode == 201) {\n                self.log(\"OpenHAB HTTP - response from \" + self.name + \": \" + body);\n            } else {\n                self.log(\"OpenHAB HTTP - error from \" + self.name + \": \" + error);\n            }\n            callback();\n        }\n    );\n};\n\nmodule.exports = SwitchItem;","/home/travis/build/npmtest/node-npmtest-homebridge-openhab/node_modules/homebridge-openhab/items/LightbulbItem.js":"\"use strict\";\n\nvar request = require(\"request\");\n\nvar LightbulbItem = function(widget,platform,homebridge) {\n    LightbulbItem.super_.call(this, widget,platform,homebridge);\n};\n\nLightbulbItem.prototype.getOtherServices = function() {\n    var otherService = new this.homebridge.hap.Service.Lightbulb();\n\n    otherService.getCharacteristic(this.homebridge.hap.Characteristic.On)\n        .on('set', this.setItemState.bind(this))\n        .on('get', this.getItemState.bind(this))\n        .setValue(this.state === 'ON');\n\n    return otherService;\n};\n\nmodule.exports = LightbulbItem;","/home/travis/build/npmtest/node-npmtest-homebridge-openhab/node_modules/homebridge-openhab/items/FanItem.js":"\"use strict\";\n\nvar request = require(\"request\");\n\nvar FanItem = function(widget,platform,homebridge) {\n    FanItem.super_.call(this, widget,platform,homebridge);\n};\n\nFanItem.prototype.getOtherServices = function() {\n    var otherService = new this.homebridge.hap.Service.Fan();\n\n    otherService.getCharacteristic(this.homebridge.hap.Characteristic.On)\n        .on('set', this.setItemState.bind(this))\n        .on('get', this.getItemState.bind(this))\n        .setValue(this.state === 'ON');\n\n    return otherService;\n};\n\nmodule.exports = FanItem;","/home/travis/build/npmtest/node-npmtest-homebridge-openhab/node_modules/homebridge-openhab/items/OutletItem.js":"\"use strict\";\n\nvar request = require(\"request\");\n\nvar OutletItem = function(widget,platform,homebridge) {\n    OutletItem.super_.call(this, widget,platform,homebridge);\n};\n\nOutletItem.prototype.getOtherServices = function() {\n    var otherService = new this.homebridge.hap.Service.Outlet();\n\n    otherService.getCharacteristic(this.homebridge.hap.Characteristic.On)\n        .on('set', this.setItemState.bind(this))\n        .on('get', this.getItemState.bind(this))\n        .setValue(this.state === 'ON');\n\n    otherService.getCharacteristic(this.homebridge.hap.Characteristic.OutletInUse)\n        .on('get', this.getItemState.bind(this))\n        .setValue(this.state === 'ON');\n\n    return otherService;\n};\n\nOutletItem.prototype.updateCharacteristics = function(message) {\n\n    this.setFromOpenHAB = true;\n    this.otherService\n        .getCharacteristic(this.homebridge.hap.Characteristic.On)\n        .setValue(message === 'ON',\n            function() {\n                this.setFromOpenHAB = false;\n            }.bind(this)\n        );\n\n    this.otherService\n        .getCharacteristic(this.homebridge.hap.Characteristic.OutletInUse)\n        .setValue(message === 'ON',\n            function() {\n                this.setFromOpenHAB = false;\n            }.bind(this)\n        );\n};\n\nmodule.exports = OutletItem;","/home/travis/build/npmtest/node-npmtest-homebridge-openhab/node_modules/homebridge-openhab/items/DimmerItem.js":"\"use strict\";\n\nvar request = require(\"request\");\n\nvar DimmerItem = function(widget,platform,homebridge) {\n    DimmerItem.super_.call(this, widget,platform,homebridge);\n};\n\nDimmerItem.prototype.getServices = function() {\n\n    this.initListener();\n    this.setInitialState = true;\n\n    this.informationService = this.getInformationServices();\n\n    this.otherService = new this.homebridge.hap.Service.Lightbulb();\n    this.otherService.getCharacteristic(this.homebridge.hap.Characteristic.On)\n        .on('set', this.setItem.bind(this))\n        .on('get', this.getItemPowerState.bind(this))\n        .setValue(+this.state > 0);\n\n    this.setInitialState = true;\n\n    this.otherService.addCharacteristic(this.homebridge.hap.Characteristic.Brightness)\n        .on('set', this.setItem.bind(this))\n        .on('get', this.getItemBrightnessState.bind(this))\n        .setValue(+this.state);\n\n    return [this.informationService, this.otherService];\n};\n\nDimmerItem.prototype.updateCharacteristics = function(message) {\n\n    this.setFromOpenHAB = true;\n    var brightness = +message;\n    var steps = 2;\n    if (brightness >= 0) {\n        this.otherService.getCharacteristic(this.homebridge.hap.Characteristic.Brightness)\n            .setValue(brightness,\n                function() {\n                    steps--;\n                    if (!steps) {\n                        this.setFromOpenHAB = false;\n                    }\n                }.bind(this));\n        this.otherService.getCharacteristic(this.homebridge.hap.Characteristic.On)\n            .setValue(brightness > 0,\n                function() {\n                    steps--;\n                    if (!steps) {\n                        this.setFromOpenHAB = false;\n                    }\n                }.bind(this));\n    }\n};\n\nDimmerItem.prototype.getItemPowerState = function(callback) {\n\n    var self = this;\n\n    this.log(\"iOS - request power state from \" + this.name);\n    request(this.url + '/state?type=json', function (error, response, body) {\n        if (!error && response.statusCode == 200) {\n            self.log(\"OpenHAB HTTP - response from \" + self.name + \": \" + body);\n            callback(undefined,+body > 0);\n        } else {\n            self.log(\"OpenHAB HTTP - error from \" + self.name + \": \" + error);\n        }\n    })\n};\n\nDimmerItem.prototype.setItem = function(value, callback) {\n\n    var self = this;\n\n    if (this.setInitialState) {\n        this.setInitialState = false;\n        callback();\n        return;\n    }\n\n    if (this.setFromOpenHAB) {\n        callback();\n        return;\n    }\n\n    this.log(\"iOS - send message to \" + this.name + \": \" + value);\n    var command = 0;\n    if (typeof value === 'boolean') {\n        command = value ? '100' : '0';\n    } else {\n        command = \"\" + value;\n    }\n    request.post(\n        this.url,\n        {\n            body: command,\n            headers: {'Content-Type': 'text/plain'}\n        },\n        function (error, response, body) {\n            if (!error && response.statusCode == 201) {\n                self.log(\"OpenHAB HTTP - response from \" + self.name + \": \" + body);\n            } else {\n                self.log(\"OpenHAB HTTP - error from \" + self.name + \": \" + error);\n            }\n            callback();\n        }\n    );\n};\n\nDimmerItem.prototype.getItemBrightnessState = function(callback) {\n\n    var self = this;\n\n    this.log(\"iOS - request brightness state from \" + this.name);\n    request(this.url + '/state?type=json', function (error, response, body) {\n        if (!error && response.statusCode == 200) {\n            self.log(\"OpenHAB HTTP - response from \" + self.name + \": \" + body);\n            callback(undefined,+body);\n        } else {\n            self.log(\"OpenHAB HTTP - error from \" + self.name + \": \" + error);\n        }\n    })\n};\n\nmodule.exports = DimmerItem;","/home/travis/build/npmtest/node-npmtest-homebridge-openhab/node_modules/homebridge-openhab/items/RollershutterItem.js":"\"use strict\";\n\nvar request = require(\"request\");\n\nvar RollershutterItem = function(widget,platform,homebridge) {\n    RollershutterItem.super_.call(this, widget,platform,homebridge);\n    this.positionState = this.homebridge.hap.Characteristic.PositionState.STOPPED;\n    this.currentPosition = 100;\n    this.targetPosition = 100;\n    this.startedPosition = 100;\n};\n\nRollershutterItem.prototype.getServices = function() {\n\n    this.initListener();\n\n    this.informationService = this.getInformationServices();\n\n    this.otherService = new this.homebridge.hap.Service.WindowCovering();\n\n    this.otherService.getCharacteristic(this.homebridge.hap.Characteristic.CurrentPosition)\n        .on('get', this.getItemCurrentPosition.bind(this))\n        .setValue(this.currentPosition);\n\n    this.setInitialState = true;\n\n    this.otherService.getCharacteristic(this.homebridge.hap.Characteristic.TargetPosition)\n        .on('set', this.setItem.bind(this))\n        .on('get', this.getItemTargetPosition.bind(this))\n        .setValue(this.currentPosition);\n\n    this.otherService.getCharacteristic(this.homebridge.hap.Characteristic.PositionState)\n        .on('get', this.getItemPositionState.bind(this))\n        .setValue(this.positionState);\n\n    return [this.informationService, this.otherService];\n};\n\nRollershutterItem.prototype.updateCharacteristics = function(message) {\n\n    if (parseInt(message) == this.targetPosition) {\n        var ps = this.homebridge.hap.Characteristic.PositionState.STOPPED;\n        var cs = parseInt(message);\n    } else if (parseInt(message) > this.targetPosition){\n        var ps = this.homebridge.hap.Characteristic.PositionState.INCREASING;\n        var cs = this.startedPosition;\n    } else {\n        var ps = this.homebridge.hap.Characteristic.PositionState.DECREASING;\n        var cs = this.startedPosition;\n    }\n\n    this.otherService\n        .getCharacteristic(this.homebridge.hap.Characteristic.PositionState)\n        .setValue(ps);\n\n    this.otherService\n        .getCharacteristic(this.homebridge.hap.Characteristic.CurrentPosition)\n        .setValue(parseInt(cs));\n    this.currentPosition = parseInt(cs);\n};\n\nRollershutterItem.prototype.setItem = function(value, callback) {\n\n    var self = this;\n\n    if (this.setInitialState) {\n        this.setInitialState = false;\n        callback();\n        return;\n    }\n\n    this.startedPosition = this.currentPosition;\n\n    this.log(\"iOS - send message to \" + this.name + \": \" + value);\n\n    var command = 0;\n    if (typeof value === 'boolean') {\n        command = value ? '100' : '0';\n    } else {\n        command = \"\" + value;\n    }\n    request.post(\n        this.url,\n        {\n            body: command,\n            headers: {'Content-Type': 'text/plain'}\n        },\n        function (error, response, body) {\n            if (!error && response.statusCode == 201) {\n                self.log(\"OpenHAB HTTP - response from \" + self.name + \": \" + body);\n                self.targetPosition = parseInt(value);\n            } else {\n                self.log(\"OpenHAB HTTP - error from \" + self.name + \": \" + error);\n            }\n            callback();\n        }\n    );\n};\n\nRollershutterItem.prototype.getItemPositionState = function(callback) {\n    this.log(\"iOS - request position state from \" + this.name);\n    this.log(\"Platform - response from \" + this.name + \": \" + this.positionState);\n    callback(undefined,this.positionState);\n};\n\nRollershutterItem.prototype.getItemTargetPosition = function(callback) {\n    this.log(\"iOS - get target position state from \" + this.name);\n    this.log(\"Platform - response from \" + this.name + \": \" + this.targetPosition);\n    callback(undefined,this.targetPosition);\n};\n\nRollershutterItem.prototype.getItemCurrentPosition = function(callback) {\n    var self = this;\n    this.log(\"iOS - request current position state from \" + this.name);\n\n    request(this.url + '/state?type=json', function (error, response, body) {\n        if (!error && response.statusCode == 200) {\n\n            self.log(\"OpenHAB HTTP - response from \" + self.name + \": \" +body);\n            self.currentPosition = parseInt(body);\n            callback(undefined,parseInt(body));\n\n        } else {\n            self.log(\"OpenHAB HTTP - error from \" + self.name + \": \" + error);\n        }\n    })\n};\n\nmodule.exports = RollershutterItem;","/home/travis/build/npmtest/node-npmtest-homebridge-openhab/node_modules/homebridge-openhab/items/TemperatureSensorItem.js":"\"use strict\";\n\nvar request = require(\"request\");\n\nvar TemperatureSensorItem = function(widget,platform,homebridge) {\n    TemperatureSensorItem.super_.call(this, widget,platform,homebridge);\n};\n\nTemperatureSensorItem.prototype.getOtherServices = function() {\n    var otherService = new this.homebridge.hap.Service.TemperatureSensor();\n\n    otherService.getCharacteristic(this.homebridge.hap.Characteristic.CurrentTemperature)\n        .on('get', this.getItemState.bind(this))\n        .setValue(this.checkItemState(this.state));\n\n    return otherService;\n};\n\nTemperatureSensorItem.prototype.checkItemState = function(state) {\n    if ('Unitialized' === state){\n        return 0.0;\n    }\n    return +state;\n};\n\n\nTemperatureSensorItem.prototype.updateCharacteristics = function(message) {\n    this.otherService\n        .getCharacteristic(this.homebridge.hap.Characteristic.CurrentTemperature)\n        .setValue(this.checkItemState(message));\n};\n\nTemperatureSensorItem.prototype.getItemState = function(callback) {\n\n    var self = this;\n\n    this.log(\"iOS - request power state from \" + this.name);\n    request(this.url + '/state?type=json', function (error, response, body) {\n        if (!error && response.statusCode == 200) {\n            self.log(\"OpenHAB HTTP - response from \" + self.name + \": \" + body);\n            callback(undefined,self.checkItemState(body));\n        } else {\n            self.log(\"OpenHAB HTTP - error from \" + self.name + \": \" + error);\n        }\n    })\n};\n\nmodule.exports = TemperatureSensorItem;","/home/travis/build/npmtest/node-npmtest-homebridge-openhab/node_modules/homebridge-openhab/items/NumberItem.js":"\"use strict\";\n\nvar request = require(\"request\");\n\nvar NumberItem = function(widget,platform,homebridge) {\n    NumberItem.super_.call(this, widget,platform,homebridge);\n};\n\nmodule.exports = NumberItem;","/home/travis/build/npmtest/node-npmtest-homebridge-openhab/node_modules/homebridge-openhab/items/ContactItem.js":"\"use strict\";\n\nvar request = require(\"request\");\n\nvar ContactItem = function(widget,platform,homebridge) {\n    ContactItem.super_.call(this, widget,platform,homebridge);\n};\n\nContactItem.prototype.getOtherServices = function() {\n    var otherService = new this.homebridge.hap.Service.ContactSensor();\n\n    otherService.getCharacteristic(this.homebridge.hap.Characteristic.ContactSensorState)\n        .on('get', this.getItemState.bind(this))\n        .setValue(this.checkItemState(this.state));\n\n    return otherService;\n};\n\nContactItem.prototype.checkItemState = function(state) {\n    if ('Unitialized' === state){\n        return this.homebridge.hap.Characteristic.ContactSensorState.CONTACT_NOT_DETECTED;\n    } else if ('CLOSED' === state){\n        return this.homebridge.hap.Characteristic.ContactSensorState.CONTACT_NOT_DETECTED;\n    } else {\n        return this.homebridge.hap.Characteristic.ContactSensorState.CONTACT_DETECTED;\n    }\n};\n\nContactItem.prototype.updateCharacteristics = function(message) {\n    this.otherService\n        .getCharacteristic(this.homebridge.hap.Characteristic.ContactSensorState)\n        .setValue(this.checkItemState(message));\n};\n\nContactItem.prototype.getItemState = function(callback) {\n\n    var self = this;\n    this.log(\"iOS - request power state from \" + this.name);\n    request(this.url + '/state?type=json', function (error, response, body) {\n        if (!error && response.statusCode == 200) {\n            self.log(\"OpenHAB HTTP - response from \" + self.name + \": \" + body);\n            callback(undefined,self.checkItemState(body));\n        } else {\n            self.log(\"OpenHAB HTTP - error from \" + self.name + \": \" + error);\n        }\n    })\n};\n\nmodule.exports = ContactItem;","/home/travis/build/npmtest/node-npmtest-homebridge-openhab/node_modules/homebridge-openhab/items/MotionSensorItem.js":"\"use strict\";\n\nvar request = require(\"request\");\n\nvar MotionSensorItem = function(widget,platform,homebridge) {\n    MotionSensorItem.super_.call(this, widget,platform,homebridge);\n};\n\nMotionSensorItem.prototype.getOtherServices = function() {\n    var otherService = new this.homebridge.hap.Service.MotionSensor();\n\n    otherService.getCharacteristic(this.homebridge.hap.Characteristic.MotionDetected)\n        .on('get', this.getItemState.bind(this))\n        .setValue(this.checkItemState(this.state));\n\n    return otherService;\n};\n\nMotionSensorItem.prototype.checkItemState = function(state) {\n    return !('Unitialized' === state || 'CLOSED' === state || false === state || 'false' === state.toLowerCase());\n};\n\nMotionSensorItem.prototype.updateCharacteristics = function(message) {\n    this.otherService\n        .getCharacteristic(this.homebridge.hap.Characteristic.MotionDetected)\n        .setValue(this.checkItemState(message));\n};\n\nMotionSensorItem.prototype.getItemState = function(callback) {\n    var self = this;\n\n    this.log(\"iOS - request state from \" + this.name);\n    request(this.url + '/state?type=json', function (error, response, body) {\n        if (!error && response.statusCode == 200) {\n            self.log(\"OpenHAB HTTP - response from \" + self.name + \": \" + body);\n            callback(undefined,self.checkItemState(body));\n        } else {\n            self.log(\"OpenHAB HTTP - error from \" + self.name + \": \" + error);\n        }\n    })\n};\n\nmodule.exports = MotionSensorItem;","/home/travis/build/npmtest/node-npmtest-homebridge-openhab/node_modules/homebridge-openhab/items/LightSensorItem.js":"\"use strict\";\n\nvar request = require(\"request\");\n\nvar LightSensorItem = function(widget,platform,homebridge) {\n    LightSensorItem.super_.call(this, widget,platform,homebridge);\n};\n\nLightSensorItem.prototype.getOtherServices = function() {\n    var otherService = new this.homebridge.hap.Service.LightSensor();\n\n    otherService.getCharacteristic(this.homebridge.hap.Characteristic.CurrentAmbientLightLevel)\n        .on('get', this.getItemState.bind(this))\n        .setValue(this.checkItemState(this.state));\n\n    return otherService;\n};\n\nLightSensorItem.prototype.checkItemState = function(state) {\n    if ('Unitialized' === state){\n        return 0.0;\n    }\n    return +state;\n};\n\nLightSensorItem.prototype.updateCharacteristics = function(message) {\n    this.otherService\n        .getCharacteristic(this.homebridge.hap.Characteristic.CurrentAmbientLightLevel)\n        .setValue(this.checkItemState(message));\n};\n\nLightSensorItem.prototype.getItemState = function(callback) {\n\n    var self = this;\n\n    this.log(\"iOS - request state from \" + this.name);\n    request(this.url + '/state?type=json', function (error, response, body) {\n        if (!error && response.statusCode == 200) {\n            self.log(\"OpenHAB HTTP - response from \" + self.name + \": \" + body);\n            callback(undefined,self.checkItemState(body));\n        } else {\n            self.log(\"OpenHAB HTTP - error from \" + self.name + \": \" + error);\n        }\n    })\n};\n\nmodule.exports = LightSensorItem;","/home/travis/build/npmtest/node-npmtest-homebridge-openhab/node_modules/homebridge-openhab/items/ThermostatItem.js":"\"use strict\";\n\nvar request = require(\"request\");\nconst EventEmitter = require(\"events\");\n\nvar ThermostatItem = function(widget,platform,homebridge) {\n    //General\n    this.temperatureDisplayUnits = homebridge.hap.Characteristic.TemperatureDisplayUnits.CELSIUS;\n    this.thermostatItemEmitter = new EventEmitter();\n    this.initEmitter();\n\n    //CurrentTemperature\n    this.itemCurrentTemperature = undefined;\n    this.listenerCurrentTemperature = undefined;\n    this.wsCurrentTemperature = undefined;\n\n    //CurrentRelativeHumidity\n    this.itemCurrentRelativeHumidity = undefined;\n    this.listenerCurrentRelativeHumidity = undefined;\n    this.wsCurrentRelativeHumidity = undefined;\n\n    //TargetTemperature\n    this.itemTargetTemperature = undefined;\n    this.setTargetTemperatureInitialState = false;\n    this.targetTemperatureArr = [];\n    this.targetTemperatureInProgress = false;\n    this.targetTemperatureTimeout = 1000;\n\n    ThermostatItem.super_.call(this, widget,platform,homebridge);\n};\n\nThermostatItem.prototype.initEmitter = function() {\n    var self=this;\n    this.thermostatItemEmitter.on('TARGET_TEMPERATURE_UPDATE_EVENT', function() {\n        self.setTargetTemperatureStateFromEmit();\n    });\n};\n\n/**\n * Init all thermostat listener\n */\nThermostatItem.prototype.initListener = function() {\n    if ((typeof this.itemCurrentTemperature) == 'undefined'){\n        throw new Error(this.name + \" needs CurrentTemperatureItem!\");\n    }\n\n    this.listenerCurrentTemperature = this.listenerFactory(\n        this.itemCurrentTemperature.name,\n        this.itemCurrentTemperature.link,\n        this.wsCurrentTemperature,\n        this.log,\n        this.updateCurrentTemperature.bind(this)\n    );\n\n    if ((typeof this.itemTargetTemperature) == 'undefined'){\n        throw new Error(this.name + \" needs TargetTemperatureItem!\");\n    }\n\n    if ((typeof this.itemCurrentRelativeHumidity) !== 'undefined'){\n        this.listenerCurrentRelativeHumidity = this.listenerFactory(\n            this.itemCurrentRelativeHumidity.name,\n            this.itemCurrentRelativeHumidity.link,\n            this.wsCurrentRelativeHumidity,\n            this.log,\n            this.updateCurrentRelativeHumidity.bind(this)\n        );\n    }\n};\n\n/**\n * Binding CurrentTemperatureItem in Celsius from ItemFactory\n * @param item\n */\nThermostatItem.prototype.setCurrentTemperatureCItem = function(item){\n    this.itemCurrentTemperature = item;\n    this.temperatureDisplayUnits = this.homebridge.hap.Characteristic.TemperatureDisplayUnits.CELSIUS;\n};\n\n/**\n * Binding CurrentTemperatureItem in Fahrenheit from ItemFactory\n * @param item\n */\nThermostatItem.prototype.setCurrentTemperatureFItem = function(item){\n    this.itemCurrentTemperature = item;\n    this.temperatureDisplayUnits = this.homebridge.hap.Characteristic.TemperatureDisplayUnits.FAHRENHEIT;\n};\n\n/**\n * Binding TargetTemperatureItem in Celsius from ItemFactory\n * @param item\n */\nThermostatItem.prototype.setTargetTemperatureCItem = function(item){\n    this.itemTargetTemperature = item;\n    this.temperatureDisplayUnits = this.homebridge.hap.Characteristic.TemperatureDisplayUnits.CELSIUS;\n};\n\n/**\n * Binding TargetTemperatureItem in Fahrenheit from ItemFactory\n * @param item\n */\nThermostatItem.prototype.setTargetTemperatureFItem = function(item){\n    this.itemTargetTemperature = item;\n    this.temperatureDisplayUnits = this.homebridge.hap.Characteristic.TemperatureDisplayUnits.FAHRENHEIT;\n};\n\n/**\n * Binding CurrentRelativeHumidityItem from ItemFactory\n * @param item\n */\nThermostatItem.prototype.setCurrentRelativeHumidityItem = function(item){\n    this.itemCurrentRelativeHumidity = item;\n};\n\n/**\n * Initiialize Others Services needed for ThermostatItem\n * @returns {*}\n */\nThermostatItem.prototype.getOtherServices = function() {\n    var otherService = new this.homebridge.hap.Service.Thermostat();\n\n    //Init CurrentTemperature Characteristic\n    otherService.getCharacteristic(this.homebridge.hap.Characteristic.CurrentTemperature)\n        .on('get', this.getCurrentTemperatureState.bind(this))\n        .setValue(this.checkTemperatureState(this.itemCurrentTemperature.state));\n\n    this.setTargetTemperatureInitialState = true;\n\n    //Init TargetTemperature Characteristic\n    otherService.getCharacteristic(this.homebridge.hap.Characteristic.TargetTemperature)\n        .on('set', this.setTargetTemperatureState.bind(this))\n        .on('get', this.getTargetTemperatureState.bind(this))\n        .setValue(this.checkTemperatureState(this.itemTargetTemperature.state));\n\n    //TODO\n    otherService.getCharacteristic(this.homebridge.hap.Characteristic.CurrentHeatingCoolingState)\n        .on('get', this.getCurrentHeatingCoolingStateMock.bind(this))\n        .setValue(1);\n\n    //TODO\n    otherService.getCharacteristic(this.homebridge.hap.Characteristic.TemperatureDisplayUnits)\n        .on('get', this.getTemperatureDisplayUnits.bind(this))\n        .setValue(this.temperatureDisplayUnits);\n\n    //TODO\n    otherService.getCharacteristic(this.homebridge.hap.Characteristic.TargetHeatingCoolingState)\n        .on('set', this.setTargetHeatingCoolingStateMock.bind(this))\n        .on('get', this.getTargetHeatingCoolingStateMock.bind(this))\n        .setValue(1);\n\n    if (this.itemCurrentRelativeHumidity) {\n        otherService.addCharacteristic(this.homebridge.hap.Characteristic.CurrentRelativeHumidity)\n            .on('get', this.getCurrentRelativeHumidityState.bind(this))\n            .setValue(this.checkRelativeHumidityState(this.itemCurrentRelativeHumidity.state));\n    }\n\n    return otherService;\n};\n\n/**\n * Set target temperature when receive emit\n */\nThermostatItem.prototype.setTargetTemperatureStateFromEmit = function(){\n    var self=this;\n    if (!this.targetTemperatureInProgress){\n        this.targetTemperatureInProgress = true;\n        setTimeout(function() {\n            var value = self.targetTemperatureArr[self.targetTemperatureArr.length-1];\n            self.log(\"iOS - send message to \" + self.itemTargetTemperature.name + \" (\" + (self.name)+\"): \" + value);\n            var command = \"\" + value;\n            request.post(\n                self.itemTargetTemperature.link,\n                {\n                    body: command,\n                    headers: {'Content-Type': 'text/plain'}\n                },\n                function (error, response, body) {\n                    if (!error && response.statusCode == 201) {\n                        self.log(\"OpenHAB HTTP - response from \" + self.itemTargetTemperature.name + \" (\" + (self.name)+\"): \" + body);\n                    } else {\n                        self.log(\"OpenHAB HTTP - error from \" + self.itemTargetTemperature.name + \" (\" + (self.name)+\"): \" + error);\n                    }\n                    self.targetTemperatureArr = [];\n                    self.targetTemperatureInProgress = false;\n                }\n            );\n        }, self.targetTemperatureTimeout);\n    }\n};\n\n/**\n * Emit target temperature update\n * @param value\n * @param callback\n */\nThermostatItem.prototype.setTargetTemperatureState = function(value,callback){\n    if (this.setTargetTemperatureInitialState) {\n        this.setTargetTemperatureInitialState = false;\n        callback();\n        return;\n    }\n    this.targetTemperatureArr.push(value);\n    this.thermostatItemEmitter.emit('TARGET_TEMPERATURE_UPDATE_EVENT');\n    callback();\n};\n\n/**\n * TODO\n * @param callback\n */\nThermostatItem.prototype.getTargetHeatingCoolingStateMock = function(callback) {\n    //TODO check se si può anche scrivere\n    callback(undefined,1);\n};\n\n/**\n * TODO\n * @param value\n * @param callback\n */\nThermostatItem.prototype.setTargetHeatingCoolingStateMock = function(value,callback){\n    callback();\n};\n\n/**\n * Get display unit from temperatureDisplayUnits\n * @param callback\n */\nThermostatItem.prototype.getTemperatureDisplayUnits = function(callback) {\n    callback(undefined,this.temperatureDisplayUnits);\n};\n\n/**\n * TODO\n * @param callback\n */\nThermostatItem.prototype.getCurrentHeatingCoolingStateMock = function(callback) {\n    //Characteristic.CurrentHeatingCoolingState.OFF = 0;\n    //Characteristic.CurrentHeatingCoolingState.HEAT = 1;\n    //Characteristic.CurrentHeatingCoolingState.COOL = 2;\n    callback(undefined,this.homebridge.hap.Characteristic.CurrentHeatingCoolingState.HEAT);\n};\n\n/**\n * Parse temperature input value\n * @param state\n * @returns {number}\n */\nThermostatItem.prototype.checkTemperatureState = function(state) {\n    if ('Unitialized' === state){\n        return 0.0;\n    }\n    return +state;\n};\n\n/**\n * Parse relative humidity input value\n * @param state\n * @returns {number}\n */\nThermostatItem.prototype.checkRelativeHumidityState = function(state) {\n    if ('Unitialized' === state){\n        return 0;\n    }\n    return +state;\n};\n\n/**\n * Set CurrentTemperature from OpenHAB\n * @param message\n */\nThermostatItem.prototype.updateCurrentTemperature = function(message) {\n    this.otherService\n        .getCharacteristic(this.homebridge.hap.Characteristic.CurrentTemperature)\n        .setValue(this.checkTemperatureState(message));\n};\n\n/**\n * Set CurrentRelativeHumidity from OpenHAB\n * @param message\n */\nThermostatItem.prototype.updateCurrentRelativeHumidity = function(message) {\n    this.otherService\n        .addCharacteristic(this.homebridge.hap.Characteristic.CurrentRelativeHumidity)\n        .setValue(this.checkRelativeHumidityState(message));\n};\n\n/**\n * Get CurrentRelativeHumidity requested from iOS\n * @param callback\n */\nThermostatItem.prototype.getCurrentRelativeHumidityState = function(callback) {\n    var self = this;\n    this.log(\"iOS - request Current relative humidity state from \" + this.itemCurrentRelativeHumidity.name + \" (\" + (self.name)+\")\");\n    request(self.itemCurrentRelativeHumidity.link + '/state?type=json', function (error, response, body) {\n        if (!error && response.statusCode == 200) {\n            self.log(\"OpenHAB HTTP - response from \" + self.itemCurrentRelativeHumidity.name + \" (\" + (self.name)+\"): \" + body);\n            callback(undefined,self.checkRelativeHumidityState(body));\n        } else {\n            self.log(\"OpenHAB HTTP - error from \" + self.itemCurrentRelativeHumidity.name + \" (\" + (self.name)+\"): \" + error);\n        }\n    })\n};\n\n/**\n * Get CurrentTemperature requested from iOS\n * @param callback\n */\nThermostatItem.prototype.getCurrentTemperatureState = function(callback) {\n    var self = this;\n    this.log(\"iOS - request current temperature state from \" + this.itemCurrentTemperature.name + \" (\" + (self.name)+\")\");\n    request(self.itemCurrentTemperature.link + '/state?type=json', function (error, response, body) {\n        if (!error && response.statusCode == 200) {\n            self.log(\"OpenHAB HTTP - response from \" + self.itemCurrentTemperature.name + \" (\" + (self.name)+\"): \" + body);\n            callback(undefined,self.checkTemperatureState(body));\n        } else {\n            self.log(\"OpenHAB HTTP - error from \" + self.itemCurrentTemperature.name + \" (\" + (self.name)+\"): \" + error);\n        }\n    })\n};\n\n/**\n * Get TargetTemperature requested from iOS\n * @param callback\n */\nThermostatItem.prototype.getTargetTemperatureState = function(callback) {\n    var self = this;\n    this.log(\"iOS - request target temperature state from \" + this.itemTargetTemperature.name + \" (\" + (self.name)+\")\");\n    request(self.itemTargetTemperature.link + '/state?type=json', function (error, response, body) {\n        if (!error && response.statusCode == 200) {\n            self.log(\"OpenHAB HTTP - response from \" + self.itemTargetTemperature.name + \" (\" + (self.name)+\"): \" + body);\n            callback(undefined,self.checkTemperatureState(body));\n        } else {\n            self.log(\"OpenHAB HTTP - error from \" + self.itemTargetTemperature.name + \" (\" + (self.name)+\"): \" + error);\n        }\n    })\n};\n\n/**\n * Export ThermostatItem\n * @type {ThermostatItem}\n */\nmodule.exports = ThermostatItem;","/home/travis/build/npmtest/node-npmtest-homebridge-openhab/node_modules/homebridge-openhab/libs/Utility.js":"'use strict';\n\nvar inherits = require(\"util\").inherits;\nvar exports = module.exports = {};\n\nexports.addInheritance = function(subclass, superclass) {\n    var proto = subclass.prototype;\n    inherits(subclass, superclass);\n    subclass.prototype.parent = superclass.prototype;\n    for (var a in proto) {\n        subclass.prototype[a] = proto[a];\n    }\n};\n\nexports.addSupportTo = function(subclass, superclass) {\n    exports.addInheritance(subclass,superclass);\n};"}